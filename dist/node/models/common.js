"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromiseOf = exports.ArrayDense = exports.ArrayUnique = exports.ArrayNotEmpty = exports.FutureDate = exports.PastDate = exports.TrimmedString = exports.NormalizedString = exports.StringNotBlank = exports.NegativeInteger = exports.PositiveInteger = exports.NegativeNumber = exports.PositiveNumber = exports.FiniteNumber = exports.SafeInteger = exports.Integer = exports.Truthy = exports.Falsy = exports.Primitive = void 0;
const base_1 = require("./base");
exports.Primitive = base_1.BasicModel([Boolean, Number, String, Symbol]).as("Primitive");
exports.Falsy = base_1.BasicModel([exports.Primitive, null, undefined]).assert(function isFalsy(x) { return !x; }).as("Falsy");
exports.Truthy = base_1.BasicModel([exports.Primitive, Object]).assert(function isTruthy(x) { return !!x; }).as("Truthy");
exports.Integer = base_1.BasicModel(Number).assert(Number.isInteger).as("Integer");
exports.SafeInteger = base_1.BasicModel(Number).assert(Number.isSafeInteger).as("SafeInteger");
exports.FiniteNumber = base_1.BasicModel(Number).assert(Number.isFinite).as("FiniteNumber");
exports.PositiveNumber = base_1.BasicModel(Number).assert(function isPositive(n) { return n >= 0; }).as("PositiveNumber");
exports.NegativeNumber = base_1.BasicModel(Number).assert(function isNegative(n) { return n <= 0; }).as("NegativeNumber");
exports.PositiveInteger = exports.PositiveNumber.extend().assert(Number.isInteger).as("PositiveInteger");
exports.NegativeInteger = exports.NegativeNumber.extend().assert(Number.isInteger).as("NegativeInteger");
exports.StringNotBlank = base_1.BasicModel(String).assert(function isNotBlank(str) { return str.trim().length > 0; }).as("StringNotBlank");
exports.NormalizedString = base_1.BasicModel(String).assert(function isNormalized(str) { return str.normalize() === str; }).as("NormalizedString");
exports.TrimmedString = base_1.BasicModel(String).assert(function isTrimmed(str) { return str.trim() === str; }).as("TrimmedString");
exports.PastDate = base_1.BasicModel(Date).assert(function isInThePast(date) { return date.getTime() < Date.now(); }).as("PastDate");
exports.FutureDate = base_1.BasicModel(Date).assert(function isInTheFuture(date) { return date.getTime() > Date.now(); }).as("FutureDate");
exports.ArrayNotEmpty = base_1.BasicModel(Array).assert(function isNotEmpty(arr) { return arr.length > 0; }).as("ArrayNotEmpty");
exports.ArrayUnique = base_1.BasicModel(Array).assert(function hasNoDuplicates(arr) { return arr.every((x, i) => arr.indexOf(x) === i); }).as("ArrayUnique");
exports.ArrayDense = base_1.BasicModel(Array).assert(function hasNoHoles(arr) { return arr.filter(() => true).length === arr.length; }).as("ArrayDense");
exports.PromiseOf = model => p => base_1.BasicModel(Promise)(p).then(x => model(x));
//# sourceMappingURL=common.js.map